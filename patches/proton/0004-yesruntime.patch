diff --git a/Makefile.in b/Makefile.in
index 0adb029f..367b7203 100644
--- a/Makefile.in
+++ b/Makefile.in
@@ -54,12 +54,11 @@ else
 endif
 
 CROSSLDFLAGS   += -Wl,--file-alignment,4096
-CFLAGS         ?= -O2 -march=nocona -mtune=core-avx2
-OPTIMIZE_FLAGS := $(CFLAGS) -mfpmath=sse
+OPTIMIZE_FLAGS := -O2 -march=nocona -mtune=core-avx2 -mfpmath=sse
 SANITY_FLAGS   := -fwrapv -fno-strict-aliasing
 DEBUG_FLAGS    := -ggdb -ffunction-sections -fdata-sections -fno-omit-frame-pointer
 COMMON_FLAGS    = -s $(OPTIMIZE_FLAGS) $(SANITY_FLAGS) -ffile-prefix-map=$(CCACHE_BASEDIR)=.
-COMMON_FLAGS32 := -mstackrealign -mno-avx
+COMMON_FLAGS32 := -mstackrealign
 COMMON_FLAGS64 := -mcmodel=small
 CARGO_BUILD_ARGS += --release
 
@@ -73,14 +72,6 @@ else
 	BEAR :=
 endif
 
-ifneq ($(USE_LTO), 1)
-	GST_LTO :=
-	FFMPEG_LTO :=
-else
-	GST_LTO := -Db_lto=true
-	FFMPEG_LTO := --enable-lto
-endif
-
 $(DST_DIR):
 	mkdir -p $@
 
@@ -94,7 +85,7 @@ all: all-dist | $(DST_DIR)
 all-dist: | $(DST_DIR)
 dist: all
 
-J = $(patsubst -j%,%,$(SUBJOBS))
+J = $(SUBJOBS)
 
 include $(SRC)/make/utility.mk
 include $(SRC)/make/rules-source.mk
@@ -127,7 +118,6 @@ $(eval $(call rules-meson,dav1d,64))
 ##
 
 GST_ORC_MESON_ARGS := \
-	$(GST_LTO) \
 	-Dexamples=disabled \
 	-Dtests=disabled \
 	-Dbenchmarks=disabled \
@@ -143,10 +133,7 @@ $(eval $(call rules-meson,gst_orc,64))
 ##
 
 GSTREAMER_MESON_ARGS := \
-	$(GST_LTO) \
 	-Dgst_parse=false \
-	-Dptp-helper-permissions=capabilities \
-	-Ddbghelp=disabled \
 	-Dintrospection=disabled \
 	-Dgobject-cast-checks=disabled \
 	-Dglib-asserts=disabled \
@@ -170,11 +157,6 @@ $(eval $(call rules-meson,gstreamer,64))
 ## graphene
 ##
 
-GRAPHENE_MESON_ARGS := \
-	-Dtests=false \
-	-Dintrospection=disabled \
-	-Dinstalled_tests=false
-
 $(eval $(call rules-source,graphene,$(SRCDIR)/graphene))
 $(eval $(call rules-meson,graphene,32))
 $(eval $(call rules-meson,graphene,64))
@@ -185,7 +167,6 @@ $(eval $(call rules-meson,graphene,64))
 ##
 
 GST_BASE_MESON_ARGS := \
-	$(GST_LTO) \
 	-Dauto_features=disabled \
 	-Dintrospection=disabled \
 	-Dgobject-cast-checks=disabled \
@@ -195,7 +176,6 @@ GST_BASE_MESON_ARGS := \
 	-Dexamples=disabled \
 	-Dtests=disabled \
 	-Ddoc=disabled \
-	-Dtools=disabled \
 	-Dadder=enabled \
 	-Dapp=enabled \
 	-Daudioconvert=enabled \
@@ -229,7 +209,6 @@ $(eval $(call rules-meson,gst_base,64))
 
 GST_GOOD_MESON_ARGS := \
 	-Dapetag=enabled \
-	$(GST_LTO) \
 	-Dauto_features=disabled \
 	-Dgobject-cast-checks=disabled \
 	-Dglib-asserts=disabled \
@@ -269,13 +248,28 @@ $(eval $(call rules-source,gst_good,$(SRCDIR)/gstreamer/subprojects/gst-plugins-
 $(eval $(call rules-meson,gst_good,32))
 $(eval $(call rules-meson,gst_good,64))
 
+##
+## gst-plugins-bad
+##
+
+GST_BAD_MESON_ARGS := \
+	-Dauto_features=disabled \
+	-Dvideoparsers=enabled \
+	-Dhls=enabled \
+	-Dmpegtsdemux=enabled
+
+GST_BAD_DEPENDS = gst_orc gstreamer gst_base
+
+$(eval $(call rules-source,gst_bad,$(SRCDIR)/gstreamer/subprojects/gst-plugins-bad/))
+$(eval $(call rules-meson,gst_bad,32))
+$(eval $(call rules-meson,gst_bad,64))
+
 ##
 ## FFmpeg
 ##
 
 FFMPEG_CONFIGURE_ARGS := \
 	--enable-shared \
-	$(FFMPEG_LTO) \
 	--disable-static \
 	--disable-everything \
 	--disable-programs \
@@ -306,9 +300,6 @@ FFMPEG_CONFIGURE_ARGS := \
 	--enable-decoder=aac \
 	--enable-demuxer=xwma \
 
-FFMPEG_CONFIGURE_ARGS64 = --optflags="$(COMMON_FLAGS) $(COMMON_FLAGS64)"
-FFMPEG_CONFIGURE_ARGS32 = --optflags="$(COMMON_FLAGS) $(COMMON_FLAGS32)"
-
 $(eval $(call rules-source,ffmpeg,$(SRCDIR)/ffmpeg))
 $(eval $(call rules-configure,ffmpeg,32))
 $(eval $(call rules-configure,ffmpeg,64))
@@ -353,7 +344,6 @@ $(OBJ)/.gst_plugins_rs-post-build32:
 ##
 
 GST_BAD_MESON_ARGS := \
-	$(GST_LTO) \
 	-Dauto_features=disabled \
 	-Dintrospection=disabled \
 	-Dgobject-cast-checks=disabled \
@@ -457,7 +447,7 @@ GST_BAD_MESON_ARGS := \
 
 GST_BAD_DEPENDS = gst_orc gstreamer gst_base
 
-$(eval $(call rules-source,gst_bad,$(SRCDIR)/gstreamer/subprojects/gst-plugins-bad/))
+$(eval $(call rules-source,gst_bad,$(SRCDIR)/gstreamer/subprojects/gst-plugins-bad))
 $(eval $(call rules-meson,gst_bad,32))
 $(eval $(call rules-meson,gst_bad,64))
 
@@ -466,7 +456,6 @@ $(eval $(call rules-meson,gst_bad,64))
 ##
 
 GST_UGLY_MESON_ARGS := \
-	$(GST_LTO) \
 	-Dauto_features=disabled \
 	-Dgobject-cast-checks=disabled \
 	-Dglib-asserts=disabled \
@@ -542,7 +531,7 @@ $(eval $(call rules-cmake,openxr,64))
 ## Note 32-bit is not supported by SteamVR, so we don't build it.
 ##
 
-WINEOPENXR_LDFLAGS = -lopenxr_loader -lvulkan
+WINEOPENXR_LDFLAGS = -lopenxr_loader
 WINEOPENXR_DEPENDS = wine openxr
 
 $(eval $(call rules-source,wineopenxr,$(SRCDIR)/wineopenxr))
@@ -610,11 +599,7 @@ WINE_SOURCE_ARGS = \
   --exclude server/trace.c \
 
 WINE_CONFIGURE_ARGS = \
-  --with-x \
-  --with-wayland \
-  --with-gstreamer \
   --with-mingw \
-  --without-oss \
   --disable-tests
 
 WINE_CONFIGURE_ARGS32 = \
@@ -679,14 +664,10 @@ DXVK_SOURCE_DATE_EPOCH64 := $(shell expr $(BASE_SOURCE_DATE_EPOCH64) - 1)
 DXVK_SOURCE_ARGS = \
   --exclude version.h.in \
 
-DXVK_MESON_ARGS = --force-fallback-for=libdisplay-info
 DXVK_MESON_ARGS32 = --bindir=$(DXVK_DST32)/lib/wine/dxvk
 DXVK_MESON_ARGS64 = --bindir=$(DXVK_DST64)/lib64/wine/dxvk
 DXVK_DEPENDS = glslang
 
-DXVK_CPPFLAGS = -msse -msse2
-DXVK_LDFLAGS = -static -static-libgcc -static-libstdc++
-
 $(eval $(call rules-source,dxvk,$(SRCDIR)/dxvk))
 $(eval $(call rules-meson,dxvk,32,CROSS))
 $(eval $(call rules-meson,dxvk,64,CROSS))
@@ -714,9 +695,6 @@ $(OBJ)/.dxvk-post-build32:
 DXVK_NVAPI_MESON_ARGS32 = --bindir=$(DXVK_NVAPI_DST32)/lib/wine/nvapi
 DXVK_NVAPI_MESON_ARGS64 = --bindir=$(DXVK_NVAPI_DST64)/lib64/wine/nvapi
 
-DXVK_NVAPI_CPPFLAGS = -msse -msse2
-DXVK_NVAPI_LDFLAGS = -static -static-libgcc -static-libstdc++
-
 $(eval $(call rules-source,dxvk-nvapi,$(SRCDIR)/dxvk-nvapi))
 $(eval $(call rules-meson,dxvk-nvapi,32,CROSS))
 $(eval $(call rules-meson,dxvk-nvapi,64,CROSS))
@@ -799,9 +777,6 @@ ifneq ($(UNSTRIPPED_BUILD),)
 	VKD3D_PROTON_MESON_ARGS = -Denable_trace=true
 endif
 
-VKD3D_PROTON_CPPFLAGS = -msse -msse2
-VKD3D_PROTON_LDFLAGS = -static -static-libgcc -static-libstdc++
-
 $(eval $(call rules-source,vkd3d-proton,$(SRCDIR)/vkd3d-proton))
 $(eval $(call rules-meson,vkd3d-proton,32,CROSS))
 $(eval $(call rules-meson,vkd3d-proton,64,CROSS))
@@ -1072,14 +1047,14 @@ $(FONTS_OBJ)/source-han/%.ttf: $$(%.ttf_CIDFONT) $$(%.ttf_FEATURES) $$(%.ttf_SEQ
 	mkdir -p $(FONTS_OBJ)/source-han
 	# Do not immediately create the target file, so that make is interrupted
 	# it will restart again
-	makeotfexe -f $($(notdir $@)_CIDFONT) -omitMacNames -ff $($(notdir $@)_FEATURES) \
+	afdko makeotfexe -f $($(notdir $@)_CIDFONT) -omitMacNames -ff $($(notdir $@)_FEATURES) \
 		-lic ADOBE -mf $($(notdir $@)_MENUNAMEDB) -r -nS -cs 25 -ch $($(notdir $@)_UNISOURCE) \
 		-ci $($(notdir $@)_SEQUENCES) -o $@.tmp
-	tx -cff +S -no_futile $($(notdir $@)_CIDFONT) $@.cff
+	afdko tx -cff +S -no_futile $($(notdir $@)_CIDFONT) $@.cff
 	# sftnedit uses a hardcoded temporary file in the local directory, so we have
 	# to run it in a dedicated temporary directory to prevent concurrent instances
 	# to step onto each other's feet
-	(TEMP_DIR=`mktemp -d` && cd $$TEMP_DIR && sfntedit -a CFF=$(abspath $($(notdir $@)).cff) $(abspath $@.tmp) && rm -fr $$TEMP_DIR)
+	(TEMP_DIR=`mktemp -d` && cd $$TEMP_DIR && afdko sfntedit -a CFF=$(abspath $($(notdir $@)).cff) $(abspath $@.tmp) && rm -fr $$TEMP_DIR)
 	mv $@.tmp $@
 
 $(FONTS_OBJ)/ume-gothic/%.ttf: $$(%.ttf_FONT) $$(%.ttf_NAMETABLE_PATCH)
@@ -1089,12 +1064,12 @@ $(FONTS_OBJ)/ume-gothic/%.ttf: $$(%.ttf_FONT) $$(%.ttf_NAMETABLE_PATCH)
 	ttx -o $@ -m $($(notdir $@)_FONT) $(FONTS_OBJ)/ume-gothic/$(notdir $(basename $($(notdir $@)_NAMETABLE_PATCH))).ttx
 
 $(simsun.ttc): $(simsun.ttf) $(nsimsun.ttf)
-	otf2otc -o $@.tmp $^
-	otf2ttf -o $@ $@.tmp
+	afdko otf2otc -o $@.tmp $^
+	afdko otf2ttf -o $@ $@.tmp
 	rm $@.tmp
 
 $(msgothic.ttc): $(msgothic.ttf) $(mspgothic.ttf) $(msuigothic.ttf)
-	otf2otc -o $@ $^
+	afdko otf2otc -o $@ $^
 
 $(micross.ttf): $(FONTS)/scripts/merge.py $(noto_sans.ttf) $(noto_sans_arabic.ttf) $(noto_sans_armenian.ttf) $(noto_sans_bengali.ttf) $(noto_sans_coptic.ttf) \
 		$(noto_sans_georgian.ttf) $(noto_sans_gujarati.ttf) $(noto_sans_hebrew.ttf) $(noto_sans_khmer.ttf) $(noto_sans_tamil.ttf) \
@@ -1243,8 +1218,8 @@ all-dist: $(DIST_OVR32) $(DIST_OVR64)
 ##
 
 default_pfx: wine gst_good gst_bad gst_libav gst_plugins_rs lsteamclient steamexe vrclient wineopenxr dxvk dxvk-nvapi vkd3d-proton
-	find $(DST_LIBDIR32)/wine -type f -execdir chmod go-w '{}' '+'
-	find $(DST_LIBDIR64)/wine -type f -execdir chmod go-w '{}' '+'
+	find $(DST_LIBDIR32)/wine -type f -execdir chmod a-w '{}' '+'
+	find $(DST_LIBDIR64)/wine -type f -execdir chmod a-w '{}' '+'
 	rm -rf $(abspath $(DIST_PREFIX))
 	python3 $(SRCDIR)/default_pfx.py $(abspath $(DIST_PREFIX)) $(abspath $(DST_DIR))
 
@@ -1376,6 +1351,7 @@ ifeq ($(ENABLE_CCACHE),1)
 	export CCACHE_DIR := $(if $(CCACHE_DIR),$(CCACHE_DIR),$(HOME)/.ccache)
 	override DOCKER_OPTS := -v $(CCACHE_DIR):$(CCACHE_DIR)$(CONTAINER_MOUNT_OPTS) $(CCACHE_ENV) -e CCACHE_DIR=$(CCACHE_DIR) $(DOCKER_OPTS)
 else
+	export CCACHE_DISABLE := 1
 	override DOCKER_OPTS := $(CCACHE_ENV) -e CCACHE_DISABLE=1 $(DOCKER_OPTS)
 endif
 
@@ -1390,6 +1366,9 @@ ifeq ($(CONTAINER_ENGINE),)
 	CONTAINER_ENGINE := docker
 endif
 
+DOCKER_BASE = $(CONTAINER_ENGINE) run --rm -v $(SRC):$(SRC)$(CONTAINER_MOUNT_OPTS) -v $(OBJ):$(OBJ)$(CONTAINER_MOUNT_OPTS) \
+                -w $(OBJ) -e MAKEFLAGS \
+                $(DOCKER_OPTS) $(STEAMRT_IMAGE)
 
 .PHONY: dist deploy redist symstore-tarball
 .DEFAULT dist deploy redist symstore-tarball:
--- b/compatibilitytool.vdf.template
+++ a/compatibilitytool.vdf.template
@@ -14,7 +14,7 @@
       "install_path" "."
 
       // For this template, we're going to substitute the display_name key in here, e.g.:
+      "display_name" "##BUILD_NAME##"
-      "display_name" "##BUILD_NAME## (native package)"
 
       "from_oslist"  "windows"
       "to_oslist"    "linux"
--- b/configure.sh
+++ a/configure.sh
@@ -128,7 +128,6 @@
     CONTAINER_MOUNT_OPTS=:Z
   fi
 
-  if [ "$arg_container_engine" != "none" ]; then
   if [[ -n "$arg_container_engine" ]]; then
     check_container_engine "$arg_container_engine" "$steamrt_image" || die "Specified container engine \"$arg_container_engine\" doesn't work"
   else
@@ -141,7 +140,6 @@
         die "${arg_container_engine:-Container engine discovery} has failed. Please fix your setup."
     fi
   fi
-  fi
 
   stat "Using $arg_container_engine."
 
--- b/make/rules-cargo.mk
+++ a/make/rules-cargo.mk
@@ -13,10 +13,8 @@
 $$(OBJ)/.$(1)-build$(3):
 	@echo ":: building $(3)bit $(1)..." >&2
 	cd $$($(2)_SRC) && env $$($(2)_ENV$(3)) \
-	cargo update --locked --offline --verbose --workspace
-	cd $$($(2)_SRC) && env $$($(2)_ENV$(3)) \
 	cargo build \
+	      -j$$(SUBJOBS) \
-	      -j$$(SUBJOBS) --locked --offline --verbose \
 	      --target "$$(CARGO_TARGET_$(3))" \
 	      --target-dir $$($(2)_OBJ$(3)) \
 	      $$(CARGO_BUILD_ARGS) \
--- b/make/rules-common.mk
+++ a/make/rules-common.mk
@@ -115,11 +115,7 @@
 
 
 $(2)_ENV$(3) = \
-    WINEDEBUG="-all" \
-    WINEPREFIX="$$(OBJ)/pfx-wine$(3)" \
-    WINEDLLOVERRIDES="winemenubuilder=d;" \
     CARGO_TARGET_$$(call toupper,$$(CARGO_TARGET_$(3)))_LINKER="$$(TARGET_$(4)$(3))-gcc" \
-    CARGO_TARGET_$$(call toupper,$$(CARGO_TARGET_$(3)))_RUSTFLAGS="$$(RUSTFLAGS)" \
     CCACHE_BASEDIR="$$(CCACHE_BASEDIR)" \
     STRIP="$$(STRIP)" \
     AR="$$(TARGET_$(4)$(3))-ar" \
@@ -133,7 +129,7 @@
     PATH="$$(call list-join,:,$$(foreach d,$$($(2)_DEPS$(3)),$$($$(d)_BINDIR$(3))),,:):$$$$PATH" \
     LD_LIBRARY_PATH="$$(call list-join,:,$$(foreach d,$$($(2)_DEPS$(3)),$$($$(d)_LIBDIR$(3))),,:)$$$$LD_LIBRARY_PATH" \
     PKG_CONFIG_PATH="$$(call list-join,:,$$(foreach d,$$($(2)_DEPS$(3)),$$($$(d)_LIBDIR$(3))/pkgconfig))" \
+    PKG_CONFIG_LIBDIR="/usr/lib/$$(PKG_CONFIG_TARGET_$(4)$(3))/pkgconfig:/usr/share/pkgconfig" \
-    PKG_CONFIG_LIBDIR="/usr/lib$(3)/pkgconfig:/usr/share/pkgconfig" \
     CFLAGS="$$($(2)_INCFLAGS$(3)) $$($(2)_CFLAGS) $$(COMMON_FLAGS) $$(COMMON_FLAGS$(3))" \
     CPPFLAGS="$$($(2)_INCFLAGS$(3)) $$($(2)_CPPFLAGS) $$(COMMON_FLAGS) $$(COMMON_FLAGS$(3))" \
     CXXFLAGS="$$($(2)_INCFLAGS$(3)) $$($(2)_CXXFLAGS) $$(COMMON_FLAGS) $$(COMMON_FLAGS$(3)) -std=c++17" \
@@ -158,7 +154,7 @@
     CROSSCPPFLAGS="$$($(2)_INCFLAGS$(3)) $$($(2)_CPPFLAGS) $$(COMMON_FLAGS) $$(COMMON_FLAGS$(3))" \
     CROSSCXXFLAGS="$$($(2)_INCFLAGS$(3)) $$($(2)_CXXFLAGS) $$(COMMON_FLAGS) $$(COMMON_FLAGS$(3)) -std=c++17" \
     CROSSLDFLAGS="$$($(2)_LIBFLAGS$(3)) $$($(2)_LDFLAGS$(3)) $$($(2)_LDFLAGS) $$(CROSSLDFLAGS)" \
+    CROSSPKG_CONFIG_LIBDIR="/usr/lib/$$(PKG_CONFIG_TARGET_CROSS$(3))/pkgconfig:/usr/share/pkgconfig" \
-    CROSSPKG_CONFIG_LIBDIR="/usr/lib$(3)/pkgconfig:/usr/share/pkgconfig" \
 
 endif
 
@@ -171,14 +167,14 @@
 install-strip = objcopy -p --file-alignment=4096 --strip-debug $(1) $(2)/$(notdir $(1)) && rm -f $(2)/$(notdir $(1)).debug
 endif
 
+TARGET_32 := i686-linux-gnu
+TARGET_64 := x86_64-linux-gnu
-TARGET_32 := i686-pc-linux-gnu
-TARGET_64 := x86_64-pc-linux-gnu
 TARGET_CROSS32 := i686-w64-mingw32
 TARGET_CROSS64 := x86_64-w64-mingw32
 
+PKG_CONFIG_TARGET_32 := i386-linux-gnu
+PKG_CONFIG_TARGET_64 := x86_64-linux-gnu
+PKG_CONFIG_TARGET_CROSS32 := i386-w64-mingw32
-PKG_CONFIG_TARGET_32 := i686-pc-linux-gnu
-PKG_CONFIG_TARGET_64 := x86_64-pc-linux-gnu
-PKG_CONFIG_TARGET_CROSS32 := i686-w64-mingw32
 PKG_CONFIG_TARGET_CROSS64 := x86_64-w64-mingw32
 
 LIBDIR_WINE_32 := wine/i386-unix
--- b/make/rules-meson.mk
+++ a/make/rules-meson.mk
@@ -48,7 +48,6 @@
 
 	env $$($(2)_ENV$(3)) \
 	meson "$$($(2)_OBJ$(3))" "$$($(2)_SRC)" \
-	      --wrap-mode=nodownload \
 	      --prefix="$$($(2)_DST$(3))" \
 	      --libdir="lib$(subst 32,,$(3))" \
 	      --buildtype=plain \
@@ -62,7 +61,7 @@
 $$(OBJ)/.$(1)-build$(3):
 	@echo ":: building $(3)bit $(1)..." >&2
 	+env $$($(2)_ENV$(3)) \
+	ninja -j$$(SUBJOBS) -C "$$($(2)_OBJ$(3))" install
-	ninja -j$$(SUBJOBS) -C "$$($(2)_OBJ$(3))" install $(-v?)
 	touch $$@
 endef
 
--- b/make/rules-winemaker.mk
+++ a/make/rules-winemaker.mk
@@ -28,7 +28,7 @@
 	@echo ":: building $(3)bit $(1)..." >&2
 	rsync -arx "$$($(2)_SRC)/" "$$($(2)_OBJ$(3))/"
 	env $$($(2)_ENV$(3)) \
+	$$(MAKE) -j$$(SUBJOBS) -C "$$($(2)_OBJ$(3))" LIBRARIES="$$($(2)_LDFLAGS)"
-	$$(MAKE) -j$$(SUBJOBS) -C "$$($(2)_OBJ$(3))" LIBRARIES="$$($(2)_LDFLAGS)"
 	cd "$$($(2)_OBJ$(3))" && touch "$(basename $(4)).spec" && env $$($(2)_ENV$(3)) \
 	winebuild --$(lastword $(subst ., ,$(4))) --fake-module -E "$(basename $(4)).spec" -o "$(4).fake"
 	mkdir -p $$($(2)_LIBDIR$(3))/$(LIBDIR_WINE_$(3))
--- b/proton
+++ a/proton
@@ -422,6 +422,7 @@
         self.wine_bin = self.bin_dir + "wine"
         self.wine64_bin = self.bin_dir + "wine64"
         self.wineserver_bin = self.bin_dir + "wineserver"
+        self.dist_lock = FileLock(self.path("dist.lock"), timeout=-1)
 
     def path(self, d):
         return self.base_dir + d
#--- b/toolmanifest_runtime.vdf
#+++ a/toolmanifest_runtime.vdf
#@@ -2,4 +2,7 @@
# {
#   "version" "2"
#   "commandline" "/proton %verb%"
#+  "require_tool_appid" "1628350"
#+  "use_sessions" "1"
#+  "compatmanager_layer_name" "proton"
# }

From 3bd60bcc5a9ee479f371c1e0d1eae7741394f02a Mon Sep 17 00:00:00 2001
From: William Horvath <william@horvath.blog>
Date: Wed, 12 Feb 2025 14:04:16 -0800
Subject: [PATCH 3/3] ntdll: Use clock_nanosleep for delay.

---
 dlls/ntdll/unix/sync.c | 66 ++++++++++++++++++++++++++++++------------
 1 file changed, 48 insertions(+), 18 deletions(-)

diff --git a/dlls/ntdll/unix/sync.c b/dlls/ntdll/unix/sync.c
index fc7cd9eb24f..3aae106ea9f 100644
--- a/dlls/ntdll/unix/sync.c
+++ b/dlls/ntdll/unix/sync.c
@@ -71,6 +71,11 @@
 
 WINE_DEFAULT_DEBUG_CHANNEL(sync);
 
+#define SECSPERDAY         86400
+/* 1601 to 1970 is 369 years plus 89 leap days */
+#define SECS_1601_TO_1970  ((369 * 365 + 89) * (ULONGLONG)SECSPERDAY)
+#define TICKS_1601_TO_1970 (SECS_1601_TO_1970 * TICKSPERSEC)
+
 HANDLE keyed_event = 0;
 
 static const char *debugstr_timeout( const LARGE_INTEGER *timeout )
@@ -1694,33 +1699,58 @@ alert_waited:
 
     if (!timeout || timeout->QuadPart == TIMEOUT_INFINITE)  /* sleep forever */
     {
-        for (;;) select( 0, NULL, NULL, NULL, NULL );
+        struct timespec ts = { .tv_sec = ~0UL >> 1, .tv_nsec = 0 };
+        while (clock_nanosleep( CLOCK_MONOTONIC, 0, &ts, &ts ) == EINTR);
     }
     else
     {
-        LARGE_INTEGER now;
-        timeout_t when, diff;
+        timeout_t when;
+        struct timespec ts;
+        when = timeout->QuadPart;
+
+        /* Note that we only care about the result of the yield for zero timeouts */
+        status = NtYieldExecution();
+        if (!when)
+            return status;
 
-        if ((when = timeout->QuadPart) < 0)
+        if (when < 0)
         {
-            NtQuerySystemTime( &now );
-            when = now.QuadPart - when;
-        }
+            when = -when;
+            when -= 450; /* rough overhead adjustment */
 
-        /* Note that we yield after establishing the desired timeout, but
-           we only care about the result of the yield for zero timeouts */
-        status = NtYieldExecution();
-        if (!when) return status;
+            if (when <= 0)
+                return status;
 
-        for (;;)
+            ts.tv_sec  = when / TICKSPERSEC;
+            ts.tv_nsec = (when % TICKSPERSEC) * 100;
+
+            while (clock_nanosleep( CLOCK_MONOTONIC, 0, &ts, &ts ) == EINTR);
+        }
+        else
         {
-            struct timeval tv;
+            LARGE_INTEGER now;
+            unsigned int ret;
+
+            when -= 450;
+
             NtQuerySystemTime( &now );
-            diff = (when - now.QuadPart + 9) / 10;
-            if (diff <= 0) break;
-            tv.tv_sec  = diff / 1000000;
-            tv.tv_usec = diff % 1000000;
-            if (select( 0, NULL, NULL, NULL, &tv ) != -1) break;
+            if (when <= now.QuadPart)
+                return status;
+
+            when -= TICKS_1601_TO_1970;
+            ts.tv_sec  = when / TICKSPERSEC;
+            ts.tv_nsec = (when % TICKSPERSEC) * 100;
+
+            do
+            {
+                ret = clock_nanosleep( CLOCK_REALTIME, TIMER_ABSTIME, &ts, NULL );
+                if (ret == EINTR)
+                {
+                    LARGE_INTEGER now;
+                    NtQuerySystemTime( &now );
+                    if (when <= now.QuadPart) break;
+                }
+            } while (ret == EINTR);
         }
     }
     return STATUS_SUCCESS;
-- 
2.48.1


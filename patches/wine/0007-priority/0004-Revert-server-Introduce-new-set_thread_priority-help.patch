From 481d50c8c0784f9c9f4bebb82a4fea049e3dcf5f Mon Sep 17 00:00:00 2001
From: William Horvath <william@horvath.blog>
Date: Fri, 1 Nov 2024 02:36:48 -0700
Subject: [PATCH 4/8] Revert "server: Introduce new set_thread_priority
 helper."

This reverts commit 06c82190c4199dbf8abec00b6d845aa110d2c400.
---
 server/thread.c | 39 +++++++++++++--------------------------
 server/thread.h |  1 -
 2 files changed, 13 insertions(+), 27 deletions(-)

diff --git a/server/thread.c b/server/thread.c
index 18dd3d6c7ca..2231fcf3541 100644
--- a/server/thread.c
+++ b/server/thread.c
@@ -753,35 +753,25 @@ affinity_t get_thread_affinity( struct thread *thread )
 #define THREAD_PRIORITY_REALTIME_HIGHEST 6
 #define THREAD_PRIORITY_REALTIME_LOWEST -7
 
-int set_thread_priority( struct thread *thread, int priority_class, int priority )
-{
-    int max = THREAD_PRIORITY_HIGHEST;
-    int min = THREAD_PRIORITY_LOWEST;
-    if (priority_class == PROCESS_PRIOCLASS_REALTIME)
-    {
-        max = THREAD_PRIORITY_REALTIME_HIGHEST;
-        min = THREAD_PRIORITY_REALTIME_LOWEST;
-    }
-    if ((priority < min || priority > max) &&
-        priority != THREAD_PRIORITY_IDLE &&
-        priority != THREAD_PRIORITY_TIME_CRITICAL)
-        return STATUS_INVALID_PARAMETER;
-
-    if (thread->state == TERMINATED)
-        return STATUS_THREAD_IS_TERMINATING;
-
-    thread->priority = priority;
-    return STATUS_SUCCESS;
-}
-
 /* set all information about a thread */
 static void set_thread_info( struct thread *thread,
                              const struct set_thread_info_request *req )
 {
     if (req->mask & SET_THREAD_INFO_PRIORITY)
     {
-        int status = set_thread_priority( thread, thread->process->priority, req->priority );
-        if (status) set_error( status );
+        int max = THREAD_PRIORITY_HIGHEST;
+        int min = THREAD_PRIORITY_LOWEST;
+        if (thread->process->priority == PROCESS_PRIOCLASS_REALTIME)
+        {
+            max = THREAD_PRIORITY_REALTIME_HIGHEST;
+            min = THREAD_PRIORITY_REALTIME_LOWEST;
+        }
+        if ((req->priority >= min && req->priority <= max) ||
+            req->priority == THREAD_PRIORITY_IDLE ||
+            req->priority == THREAD_PRIORITY_TIME_CRITICAL)
+            thread->priority = req->priority;
+        else
+            set_error( STATUS_INVALID_PARAMETER );
     }
     if (req->mask & SET_THREAD_INFO_AFFINITY)
     {
@@ -1602,8 +1592,6 @@ DECL_HANDLER(init_first_thread)
     else
         set_thread_affinity( current, current->affinity );
 
-    set_thread_priority( current, process->priority, current->priority );
-
     debug_level = max( debug_level, req->debug_level );
 
     reply->pid          = get_process_id( process );
@@ -1633,7 +1621,6 @@ DECL_HANDLER(init_thread)
 
     init_thread_context( current );
     generate_debug_event( current, DbgCreateThreadStateChange, &req->entry );
-    set_thread_priority( current, current->process->priority, current->priority );
     set_thread_affinity( current, current->affinity );
 
     reply->suspend = (current->suspend || current->process->suspend || current->context != NULL);
diff --git a/server/thread.h b/server/thread.h
index 416b01db318..baaf332a6d6 100644
--- a/server/thread.h
+++ b/server/thread.h
@@ -129,7 +129,6 @@ extern void thread_cancel_apc( struct thread *thread, struct object *owner, enum
 extern int thread_add_inflight_fd( struct thread *thread, int client, int server );
 extern int thread_get_inflight_fd( struct thread *thread, int client );
 extern struct token *thread_get_impersonation_token( struct thread *thread );
-extern int set_thread_priority( struct thread *thread, int priority_class, int priority );
 extern int set_thread_affinity( struct thread *thread, affinity_t affinity );
 extern int suspend_thread( struct thread *thread );
 extern int resume_thread( struct thread *thread );
-- 
2.47.0


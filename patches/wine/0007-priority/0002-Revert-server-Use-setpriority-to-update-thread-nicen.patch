From 8d8d3f4dff1061067b0fe446389a122d304cc6d0 Mon Sep 17 00:00:00 2001
From: William Horvath <william@horvath.blog>
Date: Fri, 1 Nov 2024 02:36:48 -0700
Subject: [PATCH 2/8] Revert "server: Use setpriority to update thread niceness
 when safe."

This reverts commit 7a96feb54da3acca8d95acc615fe8ca633050688.
---
 server/main.c   |  1 -
 server/object.h |  4 ----
 server/thread.c | 63 ++-----------------------------------------------
 3 files changed, 2 insertions(+), 66 deletions(-)

diff --git a/server/main.c b/server/main.c
index d0a0a4879b5..d1ab6f10254 100644
--- a/server/main.c
+++ b/server/main.c
@@ -247,7 +247,6 @@ int main( int argc, char *argv[] )
     init_memory();
     init_user_sid();
     init_directories( load_intl_file() );
-    init_threading();
     init_registry();
     main_loop();
     return 0;
diff --git a/server/object.h b/server/object.h
index 3b405e3..ec299dd 100644
--- a/server/object.h
+++ b/server/object.h
@@ -284,10 +284,6 @@ extern struct object *get_directory_obj( struct process *process, obj_handle_t h
 extern int directory_link_name( struct object *obj, struct object_name *name, struct object *parent );
 extern void init_directories( struct fd *intl_fd );
 
-/* thread functions */
-
-extern void init_threading(void);
-
 /* symbolic link functions */
 
 extern struct object *create_root_symlink( struct object *root, const struct unicode_str *name,
diff --git a/server/thread.c b/server/thread.c
index be7301f..723e70c 100644
--- a/server/thread.c
+++ b/server/thread.c
@@ -233,26 +233,6 @@ static struct list thread_list = LIST_INIT(thread_list);
 static int nice_limit;
 #endif
 
-void init_threading(void)
-{
-#ifdef __linux__
-#ifdef RLIMIT_NICE
-    struct rlimit rlimit;
-#endif
-#ifdef RLIMIT_NICE
-    if (!getrlimit( RLIMIT_NICE, &rlimit ))
-    {
-        rlimit.rlim_cur = rlimit.rlim_max;
-        setrlimit( RLIMIT_NICE, &rlimit );
-        if (rlimit.rlim_max <= 40) nice_limit = 20 - rlimit.rlim_max;
-        else if (rlimit.rlim_max == -1) nice_limit = -20;
-        if (nice_limit >= 0 && debug_level) fprintf(stderr, "wine: RLIMIT_NICE is <= 20, unable to use setpriority safely\n");
-    }
-#endif
-    if (nice_limit < 0 && debug_level) fprintf(stderr, "wine: Using setpriority to control niceness in the [%d,%d] range\n", nice_limit, -nice_limit );
-#endif
-}
-
 /* initialize the structure for a newly allocated thread */
 static inline void init_thread_structure( struct thread *thread )
 {
@@ -776,16 +756,6 @@ affinity_t get_thread_affinity( struct thread *thread )
     return mask;
 }
 
-static int get_base_priority( int priority_class, int priority )
-{
-    /* offsets taken from https://learn.microsoft.com/en-us/windows/win32/procthread/scheduling-priorities */
-    static const int class_offsets[] = { 4, 8, 13, 24, 6, 10 };
-    if (priority == THREAD_PRIORITY_IDLE) return (priority_class == PROCESS_PRIOCLASS_REALTIME ? 16 : 1);
-    if (priority == THREAD_PRIORITY_TIME_CRITICAL) return (priority_class == PROCESS_PRIOCLASS_REALTIME ? 31 : 15);
-    if (priority_class >= ARRAY_SIZE(class_offsets)) return 8;
-    return class_offsets[priority_class - 1] + priority;
-}
-
 #ifdef __linux__
 /* maps an NT application band [1,15] base priority to [-nice_limit, nice_limit] */
 static int get_unix_niceness( int base_priority )
@@ -798,26 +768,6 @@ static int get_unix_niceness( int base_priority )
 #define THREAD_PRIORITY_REALTIME_HIGHEST 6
 #define THREAD_PRIORITY_REALTIME_LOWEST -7
 
-static void apply_thread_priority( struct thread *thread, int priority_class, int priority )
-{
-    int base_priority = get_base_priority( priority_class, priority );
-#ifdef __linux__
-    int niceness;
-
-    /* FIXME: handle REALTIME class using SCHED_RR if possible, for now map it to highest non-realtime band */
-    if (priority_class == PROCESS_PRIOCLASS_REALTIME) base_priority = 15;
-#ifdef HAVE_SETPRIORITY
-    if (nice_limit < 0)
-    {
-        niceness = get_unix_niceness( base_priority );
-        if (setpriority( PRIO_PROCESS, thread->unix_tid, niceness ) != 0)
-            fprintf( stderr, "wine: setpriority %d for pid %d failed: %d\n", niceness, thread->unix_tid, errno );
-        return;
-    }
-#endif
-#endif
-}
-
 int set_thread_priority( struct thread *thread, int priority_class, int priority )
 {
     int max = THREAD_PRIORITY_HIGHEST;
@@ -840,7 +790,6 @@ int set_thread_priority( struct thread *thread, int priority_class, int priority
         return 0;
     thread->priority = priority;
 
-    apply_thread_priority( thread, priority_class, priority );
     return 0;
 }
 
-- 
2.47.1


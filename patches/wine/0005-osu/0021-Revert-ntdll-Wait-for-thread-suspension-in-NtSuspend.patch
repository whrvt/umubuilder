From 1cdd690a124a20c8d03d8786de2fe81d2ab2f36f Mon Sep 17 00:00:00 2001
From: William Horvath <william@horvath.blog>
Date: Fri, 31 Jan 2025 11:04:58 -0800
Subject: [PATCH 1/2] Revert "ntdll: Wait for thread suspension in
 NtSuspendThread()."

This reverts commit bfa83480970ff96bb4e4c6290f1b45745ff5d757.
---
 dlls/ntdll/unix/thread.c | 26 ++++----------------------
 server/protocol.def      |  6 ++----
 server/thread.c          | 28 ++++------------------------
 3 files changed, 10 insertions(+), 50 deletions(-)

diff --git a/dlls/ntdll/unix/thread.c b/dlls/ntdll/unix/thread.c
index c3ab1317295..b50a5b1483d 100644
--- a/dlls/ntdll/unix/thread.c
+++ b/dlls/ntdll/unix/thread.c
@@ -1622,40 +1622,22 @@ NTSTATUS WINAPI NtOpenThread( HANDLE *handle, ACCESS_MASK access,
 /******************************************************************************
  *              NtSuspendThread   (NTDLL.@)
  */
-NTSTATUS WINAPI NtSuspendThread( HANDLE handle, ULONG *ret_count )
+NTSTATUS WINAPI NtSuspendThread( HANDLE handle, ULONG *count )
 {
     BOOL self = FALSE;
-    unsigned int ret, count = 0;
-    HANDLE wait_handle = NULL;
+    unsigned int ret;
 
     SERVER_START_REQ( suspend_thread )
     {
         req->handle = wine_server_obj_handle( handle );
-        if (!(ret = wine_server_call( req )) || ret == STATUS_PENDING)
+        if (!(ret = wine_server_call( req )))
         {
             self = reply->count & 0x80000000;
-            count = reply->count & 0x7fffffff;;
-            wait_handle = wine_server_ptr_handle( reply->wait_handle );
+            if (count) *count = reply->count & 0x7fffffff;
         }
     }
     SERVER_END_REQ;
-
     if (self) usleep( 0 );
-
-    if (ret == STATUS_PENDING && wait_handle)
-    {
-        NtWaitForSingleObject( wait_handle, FALSE, NULL );
-
-        SERVER_START_REQ( suspend_thread )
-        {
-            req->handle = wine_server_obj_handle( handle );
-            req->waited_handle = wine_server_obj_handle( wait_handle );
-            ret = wine_server_call( req );
-        }
-        SERVER_END_REQ;
-    }
-
-    if (!ret && ret_count) *ret_count = count;
     return ret;
 }
 
diff --git a/server/protocol.def b/server/protocol.def
index f52d2cf3b49..e434e261ffb 100644
--- a/server/protocol.def
+++ b/server/protocol.def
@@ -1203,11 +1203,9 @@ typedef volatile struct input_shared_memory input_shm_t;
 
 /* Suspend a thread */
 @REQ(suspend_thread)
-    obj_handle_t handle;        /* thread handle */
-    obj_handle_t waited_handle; /* handle waited on */
+    obj_handle_t handle;       /* thread handle */
 @REPLY
-    int          count;         /* new suspend count */
-    obj_handle_t wait_handle;   /* handle to wait on */
+    int          count;        /* new suspend count */
 @END
 
 
diff --git a/server/thread.c b/server/thread.c
index 71c00fb6e35..67821c1b735 100644
--- a/server/thread.c
+++ b/server/thread.c
@@ -1816,32 +1816,12 @@ DECL_HANDLER(suspend_thread)
 {
     struct thread *thread;
 
-    if (req->waited_handle)
-    {
-        struct context *context;
-
-        if (!(context = (struct context *)get_handle_obj( current->process, req->waited_handle,
-                                                          0, &context_ops )))
-            return;
-        close_handle( current->process, req->waited_handle ); /* avoid extra server call */
-        set_error( context->status );
-        release_object( context );
-        return;
-    }
-
-    if (!(thread = get_thread_from_handle( req->handle, THREAD_SUSPEND_RESUME ))) return;
-
-    if (thread->state != RUNNING) set_error( STATUS_ACCESS_DENIED );
-    else
+    if ((thread = get_thread_from_handle( req->handle, THREAD_SUSPEND_RESUME )))
     {
-        reply->count = suspend_thread( thread );
-        if (!get_error() && thread != current && thread->context && thread->context->status == STATUS_PENDING)
-        {
-            set_error( STATUS_PENDING );
-            reply->wait_handle = alloc_handle( current->process, thread->context, SYNCHRONIZE, 0 );
-        }
+        if (thread->state == TERMINATED) set_error( STATUS_ACCESS_DENIED );
+        else reply->count = suspend_thread( thread );
+        release_object( thread );
     }
-    release_object( thread );
 }
 
 /* resume a thread */
-- 
2.48.1


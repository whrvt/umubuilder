diff --git a/dlls/winepulse.drv/pulse.c b/dlls/winepulse.drv/pulse.c
index 944cf938bdc..b5aec95bdfd 100644
--- a/dlls/winepulse.drv/pulse.c
+++ b/dlls/winepulse.drv/pulse.c
@@ -69,6 +69,7 @@ struct pulse_stream
     float vol[PA_CHANNELS_MAX];
 
     REFERENCE_TIME def_period;
+    REFERENCE_TIME duration;
 
     INT32 locked;
     BOOL started;
@@ -206,6 +207,16 @@ static char *wstr_to_str(const WCHAR *wstr)
     return str;
 }
 
+static void wait_pa_operation_complete(pa_operation *o)
+{
+    if (!o)
+        return;
+
+    while (pa_operation_get_state(o) == PA_OPERATION_RUNNING)
+        pulse_cond_wait();
+    pa_operation_unref(o);
+}
+
 /* Following pulseaudio design here, mainloop has the lock taken whenever
  * it is handling something for pulse, and the lock is required whenever
  * doing any pa_* call that can affect the state in any way
@@ -724,7 +735,7 @@ static void pulse_probe_settings(int render, const char *pulse_name, WAVEFORMATE
         ret = -1;
     else if (render)
         ret = pa_stream_connect_playback(stream, pulse_name, &attr,
-        PA_STREAM_START_CORKED|PA_STREAM_FIX_RATE|PA_STREAM_FIX_CHANNELS|PA_STREAM_EARLY_REQUESTS|PA_STREAM_VARIABLE_RATE, NULL, NULL);
+        PA_STREAM_START_CORKED|PA_STREAM_FIX_RATE|PA_STREAM_FIX_CHANNELS|PA_STREAM_EARLY_REQUESTS, NULL, NULL);
     else
         ret = pa_stream_connect_record(stream, pulse_name, &attr, PA_STREAM_START_CORKED|PA_STREAM_FIX_RATE|PA_STREAM_FIX_CHANNELS|PA_STREAM_EARLY_REQUESTS);
     if (ret >= 0) {
@@ -1071,10 +1082,8 @@ static HRESULT pulse_stream_connect(struct pulse_stream *stream, const char *pul
     else
         pulse_name = NULL;  /* use default */
 
-    if (stream->dataflow == eRender) flags |= PA_STREAM_VARIABLE_RATE;
-
     if (stream->dataflow == eRender)
-        ret = pa_stream_connect_playback(stream->stream, pulse_name, &attr, flags, NULL, NULL);
+        ret = pa_stream_connect_playback(stream->stream, pulse_name, &attr, flags|PA_STREAM_VARIABLE_RATE, NULL, NULL);
     else
         ret = pa_stream_connect_record(stream->stream, pulse_name, &attr, flags);
     if (ret < 0) {
@@ -1168,6 +1177,7 @@ static NTSTATUS pulse_create_stream(void *args)
         duration = 3 * period;
 
     stream->def_period = period;
+    stream->duration = params->duration;
 
     stream->period_bytes = pa_frame_size(&stream->ss) * muldiv(period, stream->ss.rate, 10000000);
 
@@ -1567,7 +1577,6 @@ static NTSTATUS pulse_timer_loop(void *args)
     pa_usec_t last_time;
     UINT32 adv_bytes;
     int success;
-    pa_operation *o;
 
     pulse_lock();
     delay.QuadPart = -stream->mmdev_period_usec * 10;
@@ -1585,13 +1594,7 @@ static NTSTATUS pulse_timer_loop(void *args)
 
         delay.QuadPart = -stream->mmdev_period_usec * 10;
 
-        o = pa_stream_update_timing_info(stream->stream, pulse_op_cb, &success);
-        if (o)
-        {
-            while (pa_operation_get_state(o) == PA_OPERATION_RUNNING)
-                pulse_cond_wait();
-            pa_operation_unref(o);
-        }
+        wait_pa_operation_complete(pa_stream_update_timing_info(stream->stream, pulse_op_cb, &success));
         err = pa_stream_get_time(stream->stream, &now);
         if (err == 0)
         {
@@ -1703,11 +1706,7 @@ static NTSTATUS pulse_start(void *args)
     {
         o = pa_stream_cork(stream->stream, 0, pulse_op_cb, &success);
         if (o)
-        {
-            while(pa_operation_get_state(o) == PA_OPERATION_RUNNING)
-                pulse_cond_wait();
-            pa_operation_unref(o);
-        }
+            wait_pa_operation_complete(o);
         else
             success = 0;
         if (!success)
@@ -1751,9 +1750,7 @@ static NTSTATUS pulse_stop(void *args)
         o = pa_stream_cork(stream->stream, 1, pulse_op_cb, &success);
         if (o)
         {
-            while(pa_operation_get_state(o) == PA_OPERATION_RUNNING)
-                pulse_cond_wait();
-            pa_operation_unref(o);
+            wait_pa_operation_complete(o);
         }
         else
             success = 0;
@@ -1798,15 +1795,8 @@ static NTSTATUS pulse_reset(void *args)
         /* If there is still data in the render buffer it needs to be removed from the server */
         int success = 0;
         if (stream->held_bytes)
-        {
-            pa_operation *o = pa_stream_flush(stream->stream, pulse_op_cb, &success);
-            if (o)
-            {
-                while (pa_operation_get_state(o) == PA_OPERATION_RUNNING)
-                    pulse_cond_wait();
-                pa_operation_unref(o);
-            }
-        }
+            wait_pa_operation_complete(pa_stream_flush(stream->stream, pulse_op_cb, &success));
+
         if (success || !stream->held_bytes)
         {
             stream->clock_lastpos = stream->clock_written = 0;
@@ -2237,6 +2227,89 @@ static NTSTATUS pulse_is_format_supported(void *args)
     return STATUS_SUCCESS;
 }
 
+static void sink_name_info_cb(pa_context *c, const pa_sink_info *i, int eol, void *userdata)
+{
+    uint32_t *current_device_index = userdata;
+    pulse_broadcast();
+
+    if (!i || !i->name || !i->name[0])
+        return;
+    *current_device_index = i->index;
+}
+
+struct find_monitor_of_sink_cb_param
+{
+    struct get_loopback_capture_device_params *params;
+    uint32_t current_device_index;
+};
+
+static void find_monitor_of_sink_cb(pa_context *c, const pa_source_info *i, int eol, void *userdata)
+{
+    struct find_monitor_of_sink_cb_param *p = userdata;
+    unsigned int len;
+
+    pulse_broadcast();
+
+    if (!i || !i->name || !i->name[0])
+        return;
+    if (i->monitor_of_sink != p->current_device_index)
+        return;
+
+    len = strlen(i->name) + 1;
+    if (len <= p->params->ret_device_len)
+    {
+        memcpy(p->params->ret_device, i->name, len);
+        p->params->result = STATUS_SUCCESS;
+        return;
+    }
+    p->params->ret_device_len = len;
+    p->params->result = STATUS_BUFFER_TOO_SMALL;
+}
+
+static NTSTATUS pulse_get_loopback_capture_device(void *args)
+{
+    struct get_loopback_capture_device_params *params = args;
+    uint32_t current_device_index = PA_INVALID_INDEX;
+    struct find_monitor_of_sink_cb_param p;
+    const char *device_name;
+    char *name;
+
+    pulse_lock();
+
+    if (!pulse_ml)
+    {
+        pulse_unlock();
+        ERR("Called without main loop running.\n");
+        params->result = E_INVALIDARG;
+        return STATUS_SUCCESS;
+    }
+
+    name = wstr_to_str(params->name);
+    params->result = pulse_connect(name);
+    free(name);
+
+    if (FAILED(params->result))
+    {
+        pulse_unlock();
+        return STATUS_SUCCESS;
+    }
+
+    device_name = params->device;
+    if (device_name && !device_name[0]) device_name = NULL;
+
+    params->result = E_FAIL;
+    wait_pa_operation_complete(pa_context_get_sink_info_by_name(pulse_ctx, device_name, &sink_name_info_cb, &current_device_index));
+    if (current_device_index != PA_INVALID_INDEX)
+    {
+        p.current_device_index = current_device_index;
+        p.params = params;
+        wait_pa_operation_complete(pa_context_get_source_info_list(pulse_ctx, &find_monitor_of_sink_cb, &p));
+    }
+
+    pulse_unlock();
+    return STATUS_SUCCESS;
+}
+
 static NTSTATUS pulse_get_mix_format(void *args)
 {
     struct get_mix_format_params *params = args;
@@ -2446,30 +2519,64 @@ static NTSTATUS pulse_set_sample_rate(void *args)
     struct set_sample_rate_params *params = args;
     struct pulse_stream *stream = handle_get_stream(params->stream);
     HRESULT hr = S_OK;
-    pa_operation *o;
     int success;
+    SIZE_T size, new_bufsize_frames;
+    BYTE *new_buffer = NULL;
+    pa_sample_spec new_ss;
+    pa_operation *o;
 
     pulse_lock();
-    if (!pulse_stream_valid(stream))
+    if (!pulse_stream_valid(stream)) {
         hr = AUDCLNT_E_DEVICE_INVALIDATED;
+        goto exit;
+    }
+    if (stream->dataflow != eRender) {
+        hr = E_NOTIMPL;
+        goto exit;
+    }
+
+    new_ss = stream->ss;
+    new_ss.rate = params->rate;
+    new_bufsize_frames = ceil((stream->duration / 10000000.) * new_ss.rate);
+    size = new_bufsize_frames * 2 * pa_frame_size(&stream->ss);
+
+    if (NtAllocateVirtualMemory(GetCurrentProcess(), (void **)&new_buffer,
+                                zero_bits, &size, MEM_COMMIT, PAGE_READWRITE)) {
+        hr = E_OUTOFMEMORY;
+        goto exit;
+    }
+
+    o = pa_stream_update_sample_rate(stream->stream, params->rate, pulse_op_cb, &success);
+    if (o)
+        wait_pa_operation_complete(o);
     else
-    {
-        if (!(o = pa_stream_update_sample_rate(stream->stream, params->new_rate, pulse_op_cb, &success)))
-            success = 0;
-        else
-        {
-            while (pa_operation_get_state(o) == PA_OPERATION_RUNNING)
-                pthread_cond_wait(&pulse_cond, &pulse_mutex);
-            pa_operation_unref(o);
-        }
+        success = 0;
 
-        if (!success) hr = E_FAIL;
-        else
-        {
-            stream->ss.rate = params->new_rate;
-            stream->period_bytes = pa_frame_size(&stream->ss) * muldiv(stream->mmdev_period_usec, stream->ss.rate, 1000000);
-        }
+    if (!success) {
+        hr = E_OUTOFMEMORY;
+        size = 0;
+        NtFreeVirtualMemory(GetCurrentProcess(), (void **)&new_buffer, &size, MEM_RELEASE);
+        goto exit;
     }
+
+    if (stream->held_bytes)
+        wait_pa_operation_complete(pa_stream_flush(stream->stream, pulse_op_cb, &success));
+
+    stream->clock_lastpos = stream->clock_written = 0;
+    stream->pa_offs_bytes = stream->lcl_offs_bytes = 0;
+    stream->held_bytes = stream->pa_held_bytes = 0;
+    stream->period_bytes = pa_frame_size(&new_ss) * muldiv(stream->mmdev_period_usec, new_ss.rate, 1000000);
+    stream->real_bufsize_bytes = size;
+    stream->bufsize_frames = new_bufsize_frames;
+    stream->ss = new_ss;
+
+    size = 0;
+    NtFreeVirtualMemory(GetCurrentProcess(), (void **)&stream->local_buffer, &size, MEM_RELEASE);
+
+    silence_buffer(new_ss.format, new_buffer, size);
+    stream->local_buffer = new_buffer;
+
+exit:
     pulse_unlock();
 
     params->result = hr;
@@ -2590,6 +2697,7 @@ const unixlib_entry_t __wine_unix_call_funcs[] =
     pulse_get_capture_buffer,
     pulse_release_capture_buffer,
     pulse_is_format_supported,
+    pulse_get_loopback_capture_device,
     pulse_get_mix_format,
     pulse_get_device_period,
     pulse_get_buffer_size,
@@ -2782,6 +2890,31 @@ static NTSTATUS pulse_wow64_is_format_supported(void *args)
     return STATUS_SUCCESS;
 }
 
+static NTSTATUS pulse_wow64_get_loopback_capture_device(void *args)
+{
+    struct
+    {
+        PTR32 name;
+        PTR32 device;
+        PTR32 ret_device;
+        UINT32 ret_device_len;
+        HRESULT result;
+    } *params32 = args;
+
+    struct get_loopback_capture_device_params params =
+    {
+        .name = ULongToPtr(params32->name),
+        .device = ULongToPtr(params32->device),
+        .ret_device = ULongToPtr(params32->device),
+        .ret_device_len = params32->ret_device_len,
+    };
+
+    pulse_get_loopback_capture_device(&params);
+    params32->result = params.result;
+    params32->ret_device_len = params.ret_device_len;
+    return STATUS_SUCCESS;
+}
+
 static NTSTATUS pulse_wow64_get_mix_format(void *args)
 {
     struct
@@ -3062,6 +3195,7 @@ const unixlib_entry_t __wine_unix_call_wow64_funcs[] =
     pulse_wow64_get_capture_buffer,
     pulse_release_capture_buffer,
     pulse_wow64_is_format_supported,
+    pulse_wow64_get_loopback_capture_device,
     pulse_wow64_get_mix_format,
     pulse_wow64_get_device_period,
     pulse_wow64_get_buffer_size,
@@ -3072,7 +3206,7 @@ const unixlib_entry_t __wine_unix_call_wow64_funcs[] =
     pulse_wow64_get_position,
     pulse_wow64_set_volumes,
     pulse_wow64_set_event_handle,
-    pulse_not_implemented,
+    pulse_set_sample_rate,
     pulse_wow64_test_connect,
     pulse_is_started,
     pulse_wow64_get_prop_value,

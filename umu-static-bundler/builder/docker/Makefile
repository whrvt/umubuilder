# Build configuration
CC = clang
TARGET = --target=x86_64-alpine-linux-musl
INCLUDES = -I/usr/local/include -Iinclude
LIBDIRS = -L/usr/local/lib

# Output configuration
BINARY_NAME ?= wrapper
PYTHON_VERSION ?= 3.13.0
VERSION_FILE ?= version.json
VERSION_FILE_NAME ?= $(VERSION_FILE)

# Compiler flags
CFLAGS = -static $(TARGET) \
		 -Oz \
		 -fno-stack-protector \
		 -ffunction-sections \
		 -fdata-sections \
		 -fmerge-all-constants \
		 -fno-unwind-tables \
		 -fno-asynchronous-unwind-tables \
		 -Wall \
		 -Wextra \
		 -Wpedantic \
		 -Wformat=2 \
		 -Werror=format-security \
		 -Wstring-compare \
		 -Wmissing-declarations \
		 -Wwrite-strings \
		 $(INCLUDES)

# Linker flags
LDFLAGS = -static \
		  -Wl,--gc-sections \
		  -Wl,--strip-all \
		  -Wl,--whole-archive \
		  -l:libarchive.a \
		  -Wl,--no-whole-archive \
		  -l:libzstd.a \
		  -pthread \
		  $(LIBDIRS)

# Source files
SRC_DIR = src
SRCS = $(wildcard $(SRC_DIR)/*.c)
OBJS = $(SRCS:.c=.o)

# Build targets
.PHONY: all clean config

all: config $(BINARY_NAME)

$(BINARY_NAME): $(OBJS)
	$(CC) $(LDFLAGS) -o $@ $^

# Generate config header with build settings
config:
	@mkdir -p include
	@{ \
		echo "#ifndef WRAPPER_CONFIG_H"; \
		echo "#define WRAPPER_CONFIG_H"; \
		echo ""; \
		echo "/* File regenerated by Makefile */"; \
		echo ""; \
		echo "#define BINARY_NAME \"$(BINARY_NAME)\""; \
		echo "#define PYTHON_VERSION \"$(PYTHON_VERSION)\""; \
		echo "#define VERSION_FILE \"$(VERSION_FILE_NAME)\""; \
		echo ""; \
		echo "#define VERSION_CHECKSUM $$(if [ -f "$(VERSION_FILE)" ]; then python3 -c 'print(sum(open("$(VERSION_FILE)", "rb").read()))'; else echo 0; fi)"; \
		echo ""; \
		echo "#endif /* WRAPPER_CONFIG_H */"; \
	} > include/wrapper_config.h

%.o: %.c
	$(CC) $(CFLAGS) -c $< -o $@

clean:
	rm -f $(OBJS) $(BINARY_NAME)
	rm -f include/wrapper_config.h
	rm -rf include
